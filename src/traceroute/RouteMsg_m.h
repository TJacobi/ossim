//
// Generated file, do not edit! Created by opp_msgc 4.2 from traceroute/RouteMsg.msg.
//

#ifndef _ROUTEMSG_M_H_
#define _ROUTEMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <TracerouteTable.h>
// }}



/**
 * Class generated from <tt>traceroute/RouteMsg.msg</tt> by opp_msgc.
 * <pre>
 * message RouteMsg extends cPacket
 * {
 *     TracerouteTable::Route route;
 *     IPvXAddress Dest;
 * }
 * </pre>
 */
class RouteMsg : public ::cPacket
{
  protected:
    TracerouteTable::Route route_var;
    IPvXAddress Dest_var;

  private:
    void copy(const RouteMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RouteMsg&);

  public:
    RouteMsg(const char *name=NULL, int kind=0);
    RouteMsg(const RouteMsg& other);
    virtual ~RouteMsg();
    RouteMsg& operator=(const RouteMsg& other);
    virtual RouteMsg *dup() const {return new RouteMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual TracerouteTable::Route& getRoute();
    virtual const TracerouteTable::Route& getRoute() const {return const_cast<RouteMsg*>(this)->getRoute();}
    virtual void setRoute(const TracerouteTable::Route& route);
    virtual IPvXAddress& getDest();
    virtual const IPvXAddress& getDest() const {return const_cast<RouteMsg*>(this)->getDest();}
    virtual void setDest(const IPvXAddress& Dest);
};

inline void doPacking(cCommBuffer *b, RouteMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RouteMsg& obj) {obj.parsimUnpack(b);}


#endif // _ROUTEMSG_M_H_
