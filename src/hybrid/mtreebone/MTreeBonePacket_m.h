//
// Generated file, do not edit! Created by opp_msgc 4.2 from hybrid/mtreebone/MTreeBonePacket.msg.
//

#ifndef _MTREEBONEPACKET_M_H_
#define _MTREEBONEPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <PeerStreamingPacket_m.h>
#include "IPvXAddress.h"
// }}



/**
 * Enum generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * enum MTreeBonePacketType
 * {
 * 	MTREEBONE_BUFFER_MAP = 0;
 * 	
 * 	
 * 	MTREEBONE_NEIGHBOR_REQUEST = 3;
 * 	MTREEBONE_NEIGHBOR_REQUEST_RESPONSE = 4;
 * 	MTREEBONE_PARENT_REQUEST = 5;
 * 	MTREEBONE_PARENT_REQUEST_RESPONSE = 6;
 * 	MTREEBONE_CHUNK_REQUEST_LIST = 7;
 * 	MTREEBONE_PEER_INFORMATION = 8;
 * 	MTREEBONE_SWITCH_POSITION_REQUEST = 9;
 * 	MTREEBONE_SWITCH_POSITION_REQUEST_RESPONSE = 10;
 * 	MTREEBONE_REPLACE_CHILD = 11;
 * 	MTREEBONE_INFORM_NEW_PARENT = 12;
 * 	MTREEBONE_PROMOTION = 13;
 * 	MTREEBONE_PACKETS_MAX = 13;
 * }
 * </pre>
 */
enum MTreeBonePacketType {
    MTREEBONE_BUFFER_MAP = 0,
    MTREEBONE_NEIGHBOR_REQUEST = 3,
    MTREEBONE_NEIGHBOR_REQUEST_RESPONSE = 4,
    MTREEBONE_PARENT_REQUEST = 5,
    MTREEBONE_PARENT_REQUEST_RESPONSE = 6,
    MTREEBONE_CHUNK_REQUEST_LIST = 7,
    MTREEBONE_PEER_INFORMATION = 8,
    MTREEBONE_SWITCH_POSITION_REQUEST = 9,
    MTREEBONE_SWITCH_POSITION_REQUEST_RESPONSE = 10,
    MTREEBONE_REPLACE_CHILD = 11,
    MTREEBONE_INFORM_NEW_PARENT = 12,
    MTREEBONE_PROMOTION = 13,
    MTREEBONE_PACKETS_MAX = 13
};

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePacket extends PeerStreamingPacket
 * {
 * 
 * 	short packetType     @getter(getPacketType) @setter(setPacketType) @enum(MTreeBonePacketType) ;
 * 	
 * }
 * </pre>
 */
class MTreeBonePacket : public ::PeerStreamingPacket
{
  protected:
    short packetType_var;

  private:
    void copy(const MTreeBonePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePacket&);

  public:
    MTreeBonePacket(const char *name=NULL, int kind=0);
    MTreeBonePacket(const MTreeBonePacket& other);
    virtual ~MTreeBonePacket();
    MTreeBonePacket& operator=(const MTreeBonePacket& other);
    virtual MTreeBonePacket *dup() const {return new MTreeBonePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getPacketType() const;
    virtual void setPacketType(short packetType);
};

inline void doPacking(cCommBuffer *b, MTreeBonePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePacketMesh extends MTreeBonePacket
 * {
 *     packetGroup = PACKET_GROUP_MESH_OVERLAY;  
 * }
 * </pre>
 */
class MTreeBonePacketMesh : public ::MTreeBonePacket
{
  protected:

  private:
    void copy(const MTreeBonePacketMesh& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePacketMesh&);

  public:
    MTreeBonePacketMesh(const char *name=NULL, int kind=0);
    MTreeBonePacketMesh(const MTreeBonePacketMesh& other);
    virtual ~MTreeBonePacketMesh();
    MTreeBonePacketMesh& operator=(const MTreeBonePacketMesh& other);
    virtual MTreeBonePacketMesh *dup() const {return new MTreeBonePacketMesh(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, MTreeBonePacketMesh& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePacketMesh& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePacketTree extends MTreeBonePacket
 * {
 *     packetGroup = PACKET_GROUP_TREE_OVERLAY; 
 * }
 * </pre>
 */
class MTreeBonePacketTree : public ::MTreeBonePacket
{
  protected:

  private:
    void copy(const MTreeBonePacketTree& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePacketTree&);

  public:
    MTreeBonePacketTree(const char *name=NULL, int kind=0);
    MTreeBonePacketTree(const MTreeBonePacketTree& other);
    virtual ~MTreeBonePacketTree();
    MTreeBonePacketTree& operator=(const MTreeBonePacketTree& other);
    virtual MTreeBonePacketTree *dup() const {return new MTreeBonePacketTree(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, MTreeBonePacketTree& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePacketTree& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBoneBufferMapPacket extends MTreeBonePacketMesh
 * {
 * 	packetType = MTREEBONE_BUFFER_MAP;
 * 	
 * 	unsigned int  sequenceNumberStart;
 * 	unsigned int  sequenceNumberEnd;
 * 	unsigned int  missingChunks;
 * 	bool boneNodeForStripe[];
 * 	bool bufferMap[];
 * 	bool tempYouAreMyParent;
 * }
 * </pre>
 */
class MTreeBoneBufferMapPacket : public ::MTreeBonePacketMesh
{
  protected:
    unsigned int sequenceNumberStart_var;
    unsigned int sequenceNumberEnd_var;
    unsigned int missingChunks_var;
    bool *boneNodeForStripe_var; // array ptr
    unsigned int boneNodeForStripe_arraysize;
    bool *bufferMap_var; // array ptr
    unsigned int bufferMap_arraysize;
    bool tempYouAreMyParent_var;

  private:
    void copy(const MTreeBoneBufferMapPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBoneBufferMapPacket&);

  public:
    MTreeBoneBufferMapPacket(const char *name=NULL, int kind=0);
    MTreeBoneBufferMapPacket(const MTreeBoneBufferMapPacket& other);
    virtual ~MTreeBoneBufferMapPacket();
    MTreeBoneBufferMapPacket& operator=(const MTreeBoneBufferMapPacket& other);
    virtual MTreeBoneBufferMapPacket *dup() const {return new MTreeBoneBufferMapPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getSequenceNumberStart() const;
    virtual void setSequenceNumberStart(unsigned int sequenceNumberStart);
    virtual unsigned int getSequenceNumberEnd() const;
    virtual void setSequenceNumberEnd(unsigned int sequenceNumberEnd);
    virtual unsigned int getMissingChunks() const;
    virtual void setMissingChunks(unsigned int missingChunks);
    virtual void setBoneNodeForStripeArraySize(unsigned int size);
    virtual unsigned int getBoneNodeForStripeArraySize() const;
    virtual bool getBoneNodeForStripe(unsigned int k) const;
    virtual void setBoneNodeForStripe(unsigned int k, bool boneNodeForStripe);
    virtual void setBufferMapArraySize(unsigned int size);
    virtual unsigned int getBufferMapArraySize() const;
    virtual bool getBufferMap(unsigned int k) const;
    virtual void setBufferMap(unsigned int k, bool bufferMap);
    virtual bool getTempYouAreMyParent() const;
    virtual void setTempYouAreMyParent(bool tempYouAreMyParent);
};

inline void doPacking(cCommBuffer *b, MTreeBoneBufferMapPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBoneBufferMapPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBoneChunkRequestListPacket extends MTreeBonePacketMesh
 * {
 * 	packetType = MTREEBONE_CHUNK_REQUEST_LIST;
 * 	
 * 	unsigned int sequenceNumbers[];
 * }
 * </pre>
 */
class MTreeBoneChunkRequestListPacket : public ::MTreeBonePacketMesh
{
  protected:
    unsigned int *sequenceNumbers_var; // array ptr
    unsigned int sequenceNumbers_arraysize;

  private:
    void copy(const MTreeBoneChunkRequestListPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBoneChunkRequestListPacket&);

  public:
    MTreeBoneChunkRequestListPacket(const char *name=NULL, int kind=0);
    MTreeBoneChunkRequestListPacket(const MTreeBoneChunkRequestListPacket& other);
    virtual ~MTreeBoneChunkRequestListPacket();
    MTreeBoneChunkRequestListPacket& operator=(const MTreeBoneChunkRequestListPacket& other);
    virtual MTreeBoneChunkRequestListPacket *dup() const {return new MTreeBoneChunkRequestListPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setSequenceNumbersArraySize(unsigned int size);
    virtual unsigned int getSequenceNumbersArraySize() const;
    virtual unsigned int getSequenceNumbers(unsigned int k) const;
    virtual void setSequenceNumbers(unsigned int k, unsigned int sequenceNumbers);
};

inline void doPacking(cCommBuffer *b, MTreeBoneChunkRequestListPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBoneChunkRequestListPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBoneNeighborRequestPacket extends MTreeBonePacketMesh
 * {
 * 	packetType = MTREEBONE_NEIGHBOR_REQUEST;
 * 	
 * 	unsigned int stripeNumber;
 * 	double		joinTime;
 * }
 * </pre>
 */
class MTreeBoneNeighborRequestPacket : public ::MTreeBonePacketMesh
{
  protected:
    unsigned int stripeNumber_var;
    double joinTime_var;

  private:
    void copy(const MTreeBoneNeighborRequestPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBoneNeighborRequestPacket&);

  public:
    MTreeBoneNeighborRequestPacket(const char *name=NULL, int kind=0);
    MTreeBoneNeighborRequestPacket(const MTreeBoneNeighborRequestPacket& other);
    virtual ~MTreeBoneNeighborRequestPacket();
    MTreeBoneNeighborRequestPacket& operator=(const MTreeBoneNeighborRequestPacket& other);
    virtual MTreeBoneNeighborRequestPacket *dup() const {return new MTreeBoneNeighborRequestPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getStripeNumber() const;
    virtual void setStripeNumber(unsigned int stripeNumber);
    virtual double getJoinTime() const;
    virtual void setJoinTime(double joinTime);
};

inline void doPacking(cCommBuffer *b, MTreeBoneNeighborRequestPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBoneNeighborRequestPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBoneNeighborRequestResponsePacket extends MTreeBonePacketMesh
 * {
 * 	packetType = MTREEBONE_NEIGHBOR_REQUEST_RESPONSE;
 * 	
 * 	unsigned int stripeNumber;
 * 	bool isAccepted;
 * }
 * </pre>
 */
class MTreeBoneNeighborRequestResponsePacket : public ::MTreeBonePacketMesh
{
  protected:
    unsigned int stripeNumber_var;
    bool isAccepted_var;

  private:
    void copy(const MTreeBoneNeighborRequestResponsePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBoneNeighborRequestResponsePacket&);

  public:
    MTreeBoneNeighborRequestResponsePacket(const char *name=NULL, int kind=0);
    MTreeBoneNeighborRequestResponsePacket(const MTreeBoneNeighborRequestResponsePacket& other);
    virtual ~MTreeBoneNeighborRequestResponsePacket();
    MTreeBoneNeighborRequestResponsePacket& operator=(const MTreeBoneNeighborRequestResponsePacket& other);
    virtual MTreeBoneNeighborRequestResponsePacket *dup() const {return new MTreeBoneNeighborRequestResponsePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getStripeNumber() const;
    virtual void setStripeNumber(unsigned int stripeNumber);
    virtual bool getIsAccepted() const;
    virtual void setIsAccepted(bool isAccepted);
};

inline void doPacking(cCommBuffer *b, MTreeBoneNeighborRequestResponsePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBoneNeighborRequestResponsePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBoneParentRequestPacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_PARENT_REQUEST;
 * 	
 * 	unsigned int stripeNumber;
 * 	bool abort;
 * 	
 * 	unsigned int ownHead;
 * }
 * </pre>
 */
class MTreeBoneParentRequestPacket : public ::MTreeBonePacketTree
{
  protected:
    unsigned int stripeNumber_var;
    bool abort_var;
    unsigned int ownHead_var;

  private:
    void copy(const MTreeBoneParentRequestPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBoneParentRequestPacket&);

  public:
    MTreeBoneParentRequestPacket(const char *name=NULL, int kind=0);
    MTreeBoneParentRequestPacket(const MTreeBoneParentRequestPacket& other);
    virtual ~MTreeBoneParentRequestPacket();
    MTreeBoneParentRequestPacket& operator=(const MTreeBoneParentRequestPacket& other);
    virtual MTreeBoneParentRequestPacket *dup() const {return new MTreeBoneParentRequestPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getStripeNumber() const;
    virtual void setStripeNumber(unsigned int stripeNumber);
    virtual bool getAbort() const;
    virtual void setAbort(bool abort);
    virtual unsigned int getOwnHead() const;
    virtual void setOwnHead(unsigned int ownHead);
};

inline void doPacking(cCommBuffer *b, MTreeBoneParentRequestPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBoneParentRequestPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBoneParentRequestResponsePacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_PARENT_REQUEST_RESPONSE;
 * 	
 * 	unsigned int stripeNumber;
 * 	bool isAccepted;
 * }
 * </pre>
 */
class MTreeBoneParentRequestResponsePacket : public ::MTreeBonePacketTree
{
  protected:
    unsigned int stripeNumber_var;
    bool isAccepted_var;

  private:
    void copy(const MTreeBoneParentRequestResponsePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBoneParentRequestResponsePacket&);

  public:
    MTreeBoneParentRequestResponsePacket(const char *name=NULL, int kind=0);
    MTreeBoneParentRequestResponsePacket(const MTreeBoneParentRequestResponsePacket& other);
    virtual ~MTreeBoneParentRequestResponsePacket();
    MTreeBoneParentRequestResponsePacket& operator=(const MTreeBoneParentRequestResponsePacket& other);
    virtual MTreeBoneParentRequestResponsePacket *dup() const {return new MTreeBoneParentRequestResponsePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getStripeNumber() const;
    virtual void setStripeNumber(unsigned int stripeNumber);
    virtual bool getIsAccepted() const;
    virtual void setIsAccepted(bool isAccepted);
};

inline void doPacking(cCommBuffer *b, MTreeBoneParentRequestResponsePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBoneParentRequestResponsePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePeerInformationPacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_PEER_INFORMATION;
 * 	
 * 	int distance[];
 * 	int numChildren[];
 * }
 * </pre>
 */
class MTreeBonePeerInformationPacket : public ::MTreeBonePacketTree
{
  protected:
    int *distance_var; // array ptr
    unsigned int distance_arraysize;
    int *numChildren_var; // array ptr
    unsigned int numChildren_arraysize;

  private:
    void copy(const MTreeBonePeerInformationPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePeerInformationPacket&);

  public:
    MTreeBonePeerInformationPacket(const char *name=NULL, int kind=0);
    MTreeBonePeerInformationPacket(const MTreeBonePeerInformationPacket& other);
    virtual ~MTreeBonePeerInformationPacket();
    MTreeBonePeerInformationPacket& operator=(const MTreeBonePeerInformationPacket& other);
    virtual MTreeBonePeerInformationPacket *dup() const {return new MTreeBonePeerInformationPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setDistanceArraySize(unsigned int size);
    virtual unsigned int getDistanceArraySize() const;
    virtual int getDistance(unsigned int k) const;
    virtual void setDistance(unsigned int k, int distance);
    virtual void setNumChildrenArraySize(unsigned int size);
    virtual unsigned int getNumChildrenArraySize() const;
    virtual int getNumChildren(unsigned int k) const;
    virtual void setNumChildren(unsigned int k, int numChildren);
};

inline void doPacking(cCommBuffer *b, MTreeBonePeerInformationPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePeerInformationPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePeerSwitchPostionRequestPacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_SWITCH_POSITION_REQUEST;
 * 	
 * 	int stripe;
 * 	IPvXAddress suggestedNewParent;
 * }
 * </pre>
 */
class MTreeBonePeerSwitchPostionRequestPacket : public ::MTreeBonePacketTree
{
  protected:
    int stripe_var;
    IPvXAddress suggestedNewParent_var;

  private:
    void copy(const MTreeBonePeerSwitchPostionRequestPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePeerSwitchPostionRequestPacket&);

  public:
    MTreeBonePeerSwitchPostionRequestPacket(const char *name=NULL, int kind=0);
    MTreeBonePeerSwitchPostionRequestPacket(const MTreeBonePeerSwitchPostionRequestPacket& other);
    virtual ~MTreeBonePeerSwitchPostionRequestPacket();
    MTreeBonePeerSwitchPostionRequestPacket& operator=(const MTreeBonePeerSwitchPostionRequestPacket& other);
    virtual MTreeBonePeerSwitchPostionRequestPacket *dup() const {return new MTreeBonePeerSwitchPostionRequestPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getStripe() const;
    virtual void setStripe(int stripe);
    virtual IPvXAddress& getSuggestedNewParent();
    virtual const IPvXAddress& getSuggestedNewParent() const {return const_cast<MTreeBonePeerSwitchPostionRequestPacket*>(this)->getSuggestedNewParent();}
    virtual void setSuggestedNewParent(const IPvXAddress& suggestedNewParent);
};

inline void doPacking(cCommBuffer *b, MTreeBonePeerSwitchPostionRequestPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePeerSwitchPostionRequestPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePeerSwitchPostionRequestResponsePacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_SWITCH_POSITION_REQUEST_RESPONSE;
 * 	
 * 	int stripe;
 * 	IPvXAddress newParent;
 * }
 * </pre>
 */
class MTreeBonePeerSwitchPostionRequestResponsePacket : public ::MTreeBonePacketTree
{
  protected:
    int stripe_var;
    IPvXAddress newParent_var;

  private:
    void copy(const MTreeBonePeerSwitchPostionRequestResponsePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePeerSwitchPostionRequestResponsePacket&);

  public:
    MTreeBonePeerSwitchPostionRequestResponsePacket(const char *name=NULL, int kind=0);
    MTreeBonePeerSwitchPostionRequestResponsePacket(const MTreeBonePeerSwitchPostionRequestResponsePacket& other);
    virtual ~MTreeBonePeerSwitchPostionRequestResponsePacket();
    MTreeBonePeerSwitchPostionRequestResponsePacket& operator=(const MTreeBonePeerSwitchPostionRequestResponsePacket& other);
    virtual MTreeBonePeerSwitchPostionRequestResponsePacket *dup() const {return new MTreeBonePeerSwitchPostionRequestResponsePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getStripe() const;
    virtual void setStripe(int stripe);
    virtual IPvXAddress& getNewParent();
    virtual const IPvXAddress& getNewParent() const {return const_cast<MTreeBonePeerSwitchPostionRequestResponsePacket*>(this)->getNewParent();}
    virtual void setNewParent(const IPvXAddress& newParent);
};

inline void doPacking(cCommBuffer *b, MTreeBonePeerSwitchPostionRequestResponsePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePeerSwitchPostionRequestResponsePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePeerReplaceChildPacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_REPLACE_CHILD;
 * 	
 * 	int stripe;
 * 	IPvXAddress newChild;
 * }
 * </pre>
 */
class MTreeBonePeerReplaceChildPacket : public ::MTreeBonePacketTree
{
  protected:
    int stripe_var;
    IPvXAddress newChild_var;

  private:
    void copy(const MTreeBonePeerReplaceChildPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePeerReplaceChildPacket&);

  public:
    MTreeBonePeerReplaceChildPacket(const char *name=NULL, int kind=0);
    MTreeBonePeerReplaceChildPacket(const MTreeBonePeerReplaceChildPacket& other);
    virtual ~MTreeBonePeerReplaceChildPacket();
    MTreeBonePeerReplaceChildPacket& operator=(const MTreeBonePeerReplaceChildPacket& other);
    virtual MTreeBonePeerReplaceChildPacket *dup() const {return new MTreeBonePeerReplaceChildPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getStripe() const;
    virtual void setStripe(int stripe);
    virtual IPvXAddress& getNewChild();
    virtual const IPvXAddress& getNewChild() const {return const_cast<MTreeBonePeerReplaceChildPacket*>(this)->getNewChild();}
    virtual void setNewChild(const IPvXAddress& newChild);
};

inline void doPacking(cCommBuffer *b, MTreeBonePeerReplaceChildPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePeerReplaceChildPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePeerInformNewParentPacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_INFORM_NEW_PARENT;
 * 	
 * 	int stripe;
 * 	IPvXAddress newParent;
 * }
 * </pre>
 */
class MTreeBonePeerInformNewParentPacket : public ::MTreeBonePacketTree
{
  protected:
    int stripe_var;
    IPvXAddress newParent_var;

  private:
    void copy(const MTreeBonePeerInformNewParentPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePeerInformNewParentPacket&);

  public:
    MTreeBonePeerInformNewParentPacket(const char *name=NULL, int kind=0);
    MTreeBonePeerInformNewParentPacket(const MTreeBonePeerInformNewParentPacket& other);
    virtual ~MTreeBonePeerInformNewParentPacket();
    MTreeBonePeerInformNewParentPacket& operator=(const MTreeBonePeerInformNewParentPacket& other);
    virtual MTreeBonePeerInformNewParentPacket *dup() const {return new MTreeBonePeerInformNewParentPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getStripe() const;
    virtual void setStripe(int stripe);
    virtual IPvXAddress& getNewParent();
    virtual const IPvXAddress& getNewParent() const {return const_cast<MTreeBonePeerInformNewParentPacket*>(this)->getNewParent();}
    virtual void setNewParent(const IPvXAddress& newParent);
};

inline void doPacking(cCommBuffer *b, MTreeBonePeerInformNewParentPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePeerInformNewParentPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>hybrid/mtreebone/MTreeBonePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MTreeBonePromotionPacket extends MTreeBonePacketTree
 * {
 * 	packetType = MTREEBONE_PROMOTION;
 * }
 * </pre>
 */
class MTreeBonePromotionPacket : public ::MTreeBonePacketTree
{
  protected:

  private:
    void copy(const MTreeBonePromotionPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MTreeBonePromotionPacket&);

  public:
    MTreeBonePromotionPacket(const char *name=NULL, int kind=0);
    MTreeBonePromotionPacket(const MTreeBonePromotionPacket& other);
    virtual ~MTreeBonePromotionPacket();
    MTreeBonePromotionPacket& operator=(const MTreeBonePromotionPacket& other);
    virtual MTreeBonePromotionPacket *dup() const {return new MTreeBonePromotionPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, MTreeBonePromotionPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MTreeBonePromotionPacket& obj) {obj.parsimUnpack(b);}


#endif // _MTREEBONEPACKET_M_H_
