//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#ifndef PEERAPP_H_
#define PEERAPP_H_

#include <UDPBasicApp.h>
//#include "NeighborList.h"
#include "NeighborMap.h"
#include "IChurnGenerator.h"
#include "ActivePeerTable.h"
#include "VideoStreamBuffer.h"

class PeerApp : public UDPBasicApp {
public:
    PeerApp();
    virtual ~PeerApp();

//    virtual void initialize();
    virtual void initialize(int stage);
    virtual int numInitStage() { return 4; }

    virtual void handleMessage(cMessage *msg);
    virtual void processPacket(cPacket *pkt);

// Helper functions
private:
    void handleTimerMessage(cMessage *msg);
    void handleExternalMessage(cMessage *msg);

    void processAcceptResponse(cPacket *pkt);
    void processKeepAliveMessage(cPacket *pkt);

    void join();
    void acceptJoinRequest(cPacket *msg);
    void addToNeighborList(cPacket *pkt);

    // Heartbeat <-- might not be used
    void startSendingHeartbeat();
    void sendKeepAliveMsgToNeighbor();

    // Chunk scheduling
    bool should_be_requested(void);
    void initializeSchedulingWindow(void);
    bool shouldStartChunkScheduling();
    void chunkScheduling(void);
    void randomScheduling(void);

    inline int getBufferMapSize(void) { return m_bufferMapSize_chunk; }

// Helper data members to store parameters values
private:
    double param_keepAliveInterval;
    double param_bufferMapInterval;
    double param_chunkSchedulingInterval;
    double param_waitingTime_SchedulingStart;
    int param_nNeighbor_SchedulingStart;


    // Helper data members for /DEBUGGING/ data collection
    cOutVector r_countBM;

    // Timers
    cMessage *timer_getJoinTime;
    cMessage *timer_join;
    cMessage *timer_keepAlive;
    cMessage *timer_chunkScheduling;
    // synRexmitTimer = new cMessage("SYN-REXMIT");

private:
    // Pointers to "global" modules
    IChurnGenerator *churn;
    ActivePeerTable *aptable;


    //NeighborList neighborList;
    NeighborMap neighborList;
//    BufferMapTable m_bmTable;
    VideoStreamBuffer *m_videoBuffer;

    static long int instanceCount;
    long int appID;

    // State variables
    bool m_joined;
    bool m_scheduling_started;

    int m_videoStreamChunkRate;     /* in [chunks/second] */
    int m_bufferMapSize_chunk;      /* in [chunks] */
    int m_schedulingWindowSize;     /* in [chunks] */

    // Variables to store history
    double m_firstJoinTime;

    // variables to keep up-to-date with
    SEQUENCE_NUMBER_T m_winStart_seqNum;
    SEQUENCE_NUMBER_T m_winEnd_seqNum;
    SEQUENCE_NUMBER_T m_head_seqNum;
};

#endif /* PEERAPP_H_ */
