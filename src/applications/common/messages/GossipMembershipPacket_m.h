//
// Generated file, do not edit! Created by opp_msgc 4.2 from applications/common/messages/GossipMembershipPacket.msg.
//

#ifndef _GOSSIPMEMBERSHIPPACKET_M_H_
#define _GOSSIPMEMBERSHIPPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <PeerStreamingPacket_m.h>
#include "IPvXAddress.h"
// }}



/**
 * Enum generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum GossipMembershipPacketType
 * {
 *     GOSSIP_SUBSCRIPTION_PT      = 0;
 *     GOSSIP_SUBS_ACK_PT          = 1;
 *     GOSSIP_UNSUBS_FROM_PVIEW_PT = 2;
 *     GOSSIP_UNSUBS_FROM_IVIEW_PT = 3;
 *     GOSSIP_HEARTBEAT_PT         = 4;
 *     GOSSIP_APP_PT               = 5;
 * }
 * </pre>
 */
enum GossipMembershipPacketType {
    GOSSIP_SUBSCRIPTION_PT = 0,
    GOSSIP_SUBS_ACK_PT = 1,
    GOSSIP_UNSUBS_FROM_PVIEW_PT = 2,
    GOSSIP_UNSUBS_FROM_IVIEW_PT = 3,
    GOSSIP_HEARTBEAT_PT = 4,
    GOSSIP_APP_PT = 5
};

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipMembershipPacket extends PeerStreamingPacket
 * {
 *     packetGroup = PACKET_GROUP_GOSSIP_OVERLAY;
 *     short packetType @getter(getPacketType) @setter(setPacketType) @enum(GossipMembershipPacketType) ;
 * }
 * </pre>
 */
class GossipMembershipPacket : public ::PeerStreamingPacket
{
  protected:
    short packetType_var;

  private:
    void copy(const GossipMembershipPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipMembershipPacket&);

  public:
    GossipMembershipPacket(const char *name=NULL, int kind=0);
    GossipMembershipPacket(const GossipMembershipPacket& other);
    virtual ~GossipMembershipPacket();
    GossipMembershipPacket& operator=(const GossipMembershipPacket& other);
    virtual GossipMembershipPacket *dup() const {return new GossipMembershipPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getPacketType() const;
    virtual void setPacketType(short packetType);
};

inline void doPacking(cCommBuffer *b, GossipMembershipPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipMembershipPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipSubscriptionPacket extends GossipMembershipPacket
 * {
 *     packetType = GOSSIP_SUBSCRIPTION_PT;
 *     bool fwdSubscription        @getter(isFwdSubscription)      @setter(setFwdSubscription);
 *     string subscriberAddress    @getter(getSubscriberAddress)   @setter(setSubscriberAddress);
 *     int subscriberPort          @getter(getSubscriberPort)      @setter(setSubscriberPort);
 *     
 * }
 * </pre>
 */
class GossipSubscriptionPacket : public ::GossipMembershipPacket
{
  protected:
    bool fwdSubscription_var;
    opp_string subscriberAddress_var;
    int subscriberPort_var;

  private:
    void copy(const GossipSubscriptionPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipSubscriptionPacket&);

  public:
    GossipSubscriptionPacket(const char *name=NULL, int kind=0);
    GossipSubscriptionPacket(const GossipSubscriptionPacket& other);
    virtual ~GossipSubscriptionPacket();
    GossipSubscriptionPacket& operator=(const GossipSubscriptionPacket& other);
    virtual GossipSubscriptionPacket *dup() const {return new GossipSubscriptionPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool isFwdSubscription() const;
    virtual void setFwdSubscription(bool fwdSubscription);
    virtual const char * getSubscriberAddress() const;
    virtual void setSubscriberAddress(const char * subscriberAddress);
    virtual int getSubscriberPort() const;
    virtual void setSubscriberPort(int subscriberPort);
};

inline void doPacking(cCommBuffer *b, GossipSubscriptionPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipSubscriptionPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipSubsAckPacket extends GossipMembershipPacket
 * {
 *     packetType = GOSSIP_SUBS_ACK_PT;
 * }
 * </pre>
 */
class GossipSubsAckPacket : public ::GossipMembershipPacket
{
  protected:

  private:
    void copy(const GossipSubsAckPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipSubsAckPacket&);

  public:
    GossipSubsAckPacket(const char *name=NULL, int kind=0);
    GossipSubsAckPacket(const GossipSubsAckPacket& other);
    virtual ~GossipSubsAckPacket();
    GossipSubsAckPacket& operator=(const GossipSubsAckPacket& other);
    virtual GossipSubsAckPacket *dup() const {return new GossipSubsAckPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, GossipSubsAckPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipSubsAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipUnSubsFromPartialViewPacket extends GossipMembershipPacket
 * {
 *     packetType = GOSSIP_UNSUBS_FROM_PVIEW_PT;
 * }
 * </pre>
 */
class GossipUnSubsFromPartialViewPacket : public ::GossipMembershipPacket
{
  protected:

  private:
    void copy(const GossipUnSubsFromPartialViewPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipUnSubsFromPartialViewPacket&);

  public:
    GossipUnSubsFromPartialViewPacket(const char *name=NULL, int kind=0);
    GossipUnSubsFromPartialViewPacket(const GossipUnSubsFromPartialViewPacket& other);
    virtual ~GossipUnSubsFromPartialViewPacket();
    GossipUnSubsFromPartialViewPacket& operator=(const GossipUnSubsFromPartialViewPacket& other);
    virtual GossipUnSubsFromPartialViewPacket *dup() const {return new GossipUnSubsFromPartialViewPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, GossipUnSubsFromPartialViewPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipUnSubsFromPartialViewPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipUnSubsFromInViewPacket extends GossipMembershipPacket
 * {
 *     packetType = GOSSIP_UNSUBS_FROM_IVIEW_PT;
 * }
 * </pre>
 */
class GossipUnSubsFromInViewPacket : public ::GossipMembershipPacket
{
  protected:

  private:
    void copy(const GossipUnSubsFromInViewPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipUnSubsFromInViewPacket&);

  public:
    GossipUnSubsFromInViewPacket(const char *name=NULL, int kind=0);
    GossipUnSubsFromInViewPacket(const GossipUnSubsFromInViewPacket& other);
    virtual ~GossipUnSubsFromInViewPacket();
    GossipUnSubsFromInViewPacket& operator=(const GossipUnSubsFromInViewPacket& other);
    virtual GossipUnSubsFromInViewPacket *dup() const {return new GossipUnSubsFromInViewPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, GossipUnSubsFromInViewPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipUnSubsFromInViewPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipHeartbeatPacket extends GossipMembershipPacket
 * {
 *     packetType = GOSSIP_HEARTBEAT_PT;
 * }
 * </pre>
 */
class GossipHeartbeatPacket : public ::GossipMembershipPacket
{
  protected:

  private:
    void copy(const GossipHeartbeatPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipHeartbeatPacket&);

  public:
    GossipHeartbeatPacket(const char *name=NULL, int kind=0);
    GossipHeartbeatPacket(const GossipHeartbeatPacket& other);
    virtual ~GossipHeartbeatPacket();
    GossipHeartbeatPacket& operator=(const GossipHeartbeatPacket& other);
    virtual GossipHeartbeatPacket *dup() const {return new GossipHeartbeatPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, GossipHeartbeatPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipHeartbeatPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/common/messages/GossipMembershipPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet GossipApplicationPacket extends GossipMembershipPacket
 * {
 *     packetType = GOSSIP_APP_PT;
 *     IPvXAddress rootAddress     @getter(getRootAddress)         @setter(setRootAddress);
 *     long messageId              @getter(getMessageId)           @setter(setMessageId);
 *     double timeStamp            @getter(getTimeStamp)           @setter(setTimeStamp);
 * }
 * </pre>
 */
class GossipApplicationPacket : public ::GossipMembershipPacket
{
  protected:
    IPvXAddress rootAddress_var;
    long messageId_var;
    double timeStamp_var;

  private:
    void copy(const GossipApplicationPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GossipApplicationPacket&);

  public:
    GossipApplicationPacket(const char *name=NULL, int kind=0);
    GossipApplicationPacket(const GossipApplicationPacket& other);
    virtual ~GossipApplicationPacket();
    GossipApplicationPacket& operator=(const GossipApplicationPacket& other);
    virtual GossipApplicationPacket *dup() const {return new GossipApplicationPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getRootAddress();
    virtual const IPvXAddress& getRootAddress() const {return const_cast<GossipApplicationPacket*>(this)->getRootAddress();}
    virtual void setRootAddress(const IPvXAddress& rootAddress);
    virtual long getMessageId() const;
    virtual void setMessageId(long messageId);
    virtual double getTimeStamp() const;
    virtual void setTimeStamp(double timeStamp);
};

inline void doPacking(cCommBuffer *b, GossipApplicationPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GossipApplicationPacket& obj) {obj.parsimUnpack(b);}


#endif // _GOSSIPMEMBERSHIPPACKET_M_H_
