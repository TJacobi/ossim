/*
 * ActivePeerTable.h
 *
 *  Created on: Mar 30, 2012
 *      Author: giang
 */

//TODO: it might be nicer to implement this table as a vector instead of a set (for easier accessing elements using indices)

#ifndef NEIGHBORLIST_H_
#define NEIGHBORLIST_H_

#define LIST_SIZE 5

#include <vector>
#include <omnetpp.h>
#include "IPvXAddress.h"
//#include "IInterfaceTable.h"
//#include "NotificationBoard.h"



/**
 * @see
 */
//class NeighborList: public cSimpleModule, protected INotifiable
class NeighborList: public cSimpleModule
{
  protected:
    // displays summary above the icon
    // virtual void updateDisplayString();

  public:
    NeighborList();
    virtual ~NeighborList();

  protected:
    virtual int numInitStages() const  {return 4;}
    virtual void initialize(int stage);

    /**
     * Raises an error.
     */
    virtual void handleMessage(cMessage *);

  public:
    /**
     * For debugging
     */
    virtual void printNeighborList() const;

    /** @name Neighbor List manipulation */
    //@{

    /**
     * Checks if a peer, given its address, is a neighbor.
     */
    virtual bool isNeighbor(const IPvXAddress& dest) const;

    /**
     * Returns the total number of Neighbors in the list
     */
    virtual int getSizeNeighborList() const;

    /**
     * Adds a Neighbor's address to the table. Note that once added, addresses
     * cannot be modified; you must delete and re-add them instead.
     */
    virtual void addNeighborAddress(const IPvXAddress &address);

    /**
     * Deletes the given Neighbor's address from the table.
     * Returns true if the address was deleted correctly, false if it was
     * not in the table.
     */
    virtual bool deleteNeighborAddress(const IPvXAddress &address);

    /**
     * Utility function: Returns a vector of /N/ addresses of the active nodes.
     */
    virtual std::vector<IPvXAddress> getNeighborList() const;

    //@}

  protected:
        typedef std::vector<IPvXAddress> AddressList;
//        typedef std::map<IPvXAddress, NeighborInfo *> AddressList;
        mutable AddressList neighborList;
};

#endif /* NEIGHBORLIST_H_ */
