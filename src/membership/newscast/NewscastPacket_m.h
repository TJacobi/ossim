//
// Generated file, do not edit! Created by opp_msgc 4.2 from membership/newscast/NewscastPacket.msg.
//

#ifndef _NEWSCASTPACKET_M_H_
#define _NEWSCASTPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <PeerStreamingPacket_m.h>
#include "NewscastCache.h"
// }}



/**
 * Enum generated from <tt>membership/newscast/NewscastPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum NewscastPacketType
 * {
 * 	NEWSCAST_REQUEST            = 0;
 * 	NEWSCAST_REPLY              = 1;
 * }
 * </pre>
 */
enum NewscastPacketType {
    NEWSCAST_REQUEST = 0,
    NEWSCAST_REPLY = 1
};

/**
 * Class generated from <tt>membership/newscast/NewscastPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet NewscastPacket extends PeerStreamingPacket
 * {
 *     packetGroup = PACKET_GROUP_GOSSIP_OVERLAY;
 *     
 *     short packetType     @getter(getPacketType) @setter(setPacketType) @enum(NewscastPacketType) ;
 *     NewscastCache cache @getter(getCache)      @setter(setCache);       
 * }
 * </pre>
 */
class NewscastPacket : public ::PeerStreamingPacket
{
  protected:
    short packetType_var;
    NewscastCache cache_var;

  private:
    void copy(const NewscastPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewscastPacket&);

  public:
    NewscastPacket(const char *name=NULL, int kind=0);
    NewscastPacket(const NewscastPacket& other);
    virtual ~NewscastPacket();
    NewscastPacket& operator=(const NewscastPacket& other);
    virtual NewscastPacket *dup() const {return new NewscastPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getPacketType() const;
    virtual void setPacketType(short packetType);
    virtual NewscastCache& getCache();
    virtual const NewscastCache& getCache() const {return const_cast<NewscastPacket*>(this)->getCache();}
    virtual void setCache(const NewscastCache& cache);
};

inline void doPacking(cCommBuffer *b, NewscastPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewscastPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>membership/newscast/NewscastPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet NewscastRequestPacket extends NewscastPacket
 * {
 * 	packetType = NEWSCAST_REQUEST;
 * }
 * </pre>
 */
class NewscastRequestPacket : public ::NewscastPacket
{
  protected:

  private:
    void copy(const NewscastRequestPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewscastRequestPacket&);

  public:
    NewscastRequestPacket(const char *name=NULL, int kind=0);
    NewscastRequestPacket(const NewscastRequestPacket& other);
    virtual ~NewscastRequestPacket();
    NewscastRequestPacket& operator=(const NewscastRequestPacket& other);
    virtual NewscastRequestPacket *dup() const {return new NewscastRequestPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, NewscastRequestPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewscastRequestPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>membership/newscast/NewscastPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet NewscastReplyPacket extends NewscastPacket
 * {
 * 	packetType = NEWSCAST_REPLY;
 * }
 * </pre>
 */
class NewscastReplyPacket : public ::NewscastPacket
{
  protected:

  private:
    void copy(const NewscastReplyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewscastReplyPacket&);

  public:
    NewscastReplyPacket(const char *name=NULL, int kind=0);
    NewscastReplyPacket(const NewscastReplyPacket& other);
    virtual ~NewscastReplyPacket();
    NewscastReplyPacket& operator=(const NewscastReplyPacket& other);
    virtual NewscastReplyPacket *dup() const {return new NewscastReplyPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, NewscastReplyPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewscastReplyPacket& obj) {obj.parsimUnpack(b);}


#endif // _NEWSCASTPACKET_M_H_
