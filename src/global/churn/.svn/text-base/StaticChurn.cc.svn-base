//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "StaticChurn.h"

Define_Module(StaticChurn);
//Define_Module(ActivePeerTable);


StaticChurn::StaticChurn() {
    // TODO Auto-generated constructor stub

}

StaticChurn::~StaticChurn() {
    // TODO Auto-generated destructor stub
}

void StaticChurn::initialize(int stage)
{
    if (stage==0)
        {
            // get a pointer to the NotificationBoard module and IInterfaceTable
            nb = NotificationBoardAccess().get();

            nb->subscribe(this, NF_INTERFACE_CREATED);
            nb->subscribe(this, NF_INTERFACE_DELETED);
            nb->subscribe(this, NF_INTERFACE_STATE_CHANGED);
            nb->subscribe(this, NF_INTERFACE_CONFIG_CHANGED);
            nb->subscribe(this, NF_INTERFACE_IPv4CONFIG_CHANGED);
        }
        else if (stage==1)
        {

        }
        else if (stage==3)
        {

        }
}

void StaticChurn::handleMessage(cMessage *)
{
    EV << "ActivePeerTable doesn't process messages!" << endl;
}

void StaticChurn::receiveChangeNotification(int category, const cPolymorphic *details)
{
    return;
}

double StaticChurn::getArrivalTime()
{
    double _arrTime = par("arrivalTime");

    return _arrTime;
}

double StaticChurn::getDepartTime()
{
    double _departTime = par("departTime");


    return _departTime;
}
