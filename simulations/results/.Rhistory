setwd("/nix/workspace/omnet422-inet118/so/simulations/results/")
#setwd("/home/darmstadt/nguyeng/sim/omnetpp/so/simulations/results/")
require(omnetpp)
scalarFiles <- file.path('Donet_Homo_oneRouter_Network-*.sca')
dataset_Hit <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkHit:count")'))
dataset_Miss <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkMiss:count")'))
#print(dataset_Hit)
#print(dataset_Miss)
dataset_Hit$params
dataset_Hit
setwd("/nix/workspace/omnet422-inet118/so/simulations/results/")
#setwd("/home/darmstadt/nguyeng/sim/omnetpp/so/simulations/results/")
require(omnetpp)
scalarFiles <- file.path('Donet_Homo_oneRouter_Network-*.sca')
dataset_Hit <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkHit:count")'))
dataset_Miss <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkMiss:count")'))
#print(dataset_Hit)
#print(dataset_Miss)
dataset_Hit
dataset_maxNOP <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.peerNode[*].peerApp.mesh") AND name("maxNOP")'))
dataset_maxNOP
dataset_maxNOP <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.peerNode[0].peerApp.mesh") AND name("maxNOP")'))
dataset_maxNOP
dataset_maxNOP$value
dataset_maxNOP$values
dataset_maxNOP$scalars$values
dataset_maxNOP$scalars
dataset_maxNOP$scalars$value
dataset_Hit$name
dataset_Hit$scalars$name
dataset_Hit$scalars$measurement
dataset_Hit$scalars['measurement']
dataset_Hit$scalars
dataset_Hit$runattrs
dataset_Hit$runattrs$measurement
dataset_Hit$runattrs['measurement']
classof(dataset_Hit$runattrs)
class(dataset_Hit$runattrs)
dim(dataset_Hit$runattrs)
dataset_Hit$runattrs[21,]
dataset_Hit$runattrs[,'measurement']
d_maxNOP <- makeBarChartDataset(dataset_maxNOP, rows=c('measurement'), columns=c('name'))
d_maxNOP
class(d_maxNOP)
m_ci <- cbind(d_maxNOP, CI)
source('~/.active-rstudio-document')
m_ci
source('/nix/workspace/omnet422-inet118/so/r-script/calculate-continuity-index.R')
# Path settings
setwd("/nix/workspace/omnet422-inet118/so/simulations/results/")
#setwd("/home/darmstadt/nguyeng/sim/omnetpp/so/simulations/results/")
# Load library
require(omnetpp)
# Input files
scalarFiles <- file.path('Donet_Homo_oneRouter_Network-*.sca')
# Measured values
dataset_Hit <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkHit:count")'))
dataset_Miss <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkMiss:count")'))
# print(dataset_Hit)
# print(dataset_Miss)
# Parameters
dataset_maxNOP <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.peerNode[0].peerApp.mesh") AND name("maxNOP")'))
# print(dataset_maxNOP)
# ----------- Testing ----------------
# -- Pretending the parameter passing
dataset <- dataset_Hit
rows=c('measurement')
columns=c('name')
aggregate = 'mean'
# -- Function content
runattrs <- getRunsInWideFormat(dataset$runattrs)
scalars <- merge(runattrs, dataset$scalars)
rowNames = apply(scalars[rows], 1, paste, collapse = ".")
columnNames = apply(scalars[columns], 1, paste, collapse = ".")
#tapply(scalars$value, list(rowNames, columnNames), aggregate)
tapply(scalars$value, list(rowNames, columnNames))
runattrs <- getRunsInWideFormat(dataset$runattrs)
runattrs <- getRunsInWideFormat(dataset$runattrs)
d_maxNOP <- makeBarChartDataset(dataset_maxNOP, rows=c('measurement'), columns=c('name'))
# -- Function declaration
function getRunsInWideFormat(runattrs)
{
drop.levels <- function(dataframe) {
dataframe[] <- lapply(dataframe, function(x) x[, drop = TRUE])
return(dataframe)
}
runattrs <- drop.levels(reshape(runattrs, direction = "wide",
idvar = "runid", timevar = "attrname"))
names(runattrs) <- sapply(names(runattrs), function(name) sub("^attrvalue\\.",
"", name))
runattrs
}
# -- Function content
runattrs <- getRunsInWideFormat(dataset$runattrs)
getRunsInWideFormat <- function (runattrs)
{
drop.levels <- function(dataframe) {
dataframe[] <- lapply(dataframe, function(x) x[, drop = TRUE])
return(dataframe)
}
runattrs <- drop.levels(reshape(runattrs, direction = "wide",
idvar = "runid", timevar = "attrname"))
names(runattrs) <- sapply(names(runattrs), function(name) sub("^attrvalue\\.",
"", name))
runattrs
}
# -- Function content
runattrs <- getRunsInWideFormat(dataset$runattrs)
scalars <- merge(runattrs, dataset$scalars)
rowNames = apply(scalars[rows], 1, paste, collapse = ".")
columnNames = apply(scalars[columns], 1, paste, collapse = ".")
tapply(scalars$value, list(rowNames, columnNames))
scalars$value
dataset_Hit
dataset_Hit$scalars
scalars
rowNames
scalars$value
class(scalars$value)
m <- tapply(scalars$value, list(rowNames, columnNames))
m
m <- tapply(scalars$value, list(rowNames, columnNames), aggregate)
m
# Path settings
setwd("/nix/workspace/omnet422-inet118/so/simulations/results/")
#setwd("/home/darmstadt/nguyeng/sim/omnetpp/so/simulations/results/")
# Load library
require(omnetpp)
# Input files
scalarFiles <- file.path('Donet_Homo_oneRouter_Network-*.sca')
# Measured values
dataset_Hit <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkHit:count")'))
dataset_Miss <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkMiss:count")'))
# print(dataset_Hit)
# print(dataset_Miss)
# Parameters
dataset_maxNOP <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.peerNode[0].peerApp.mesh") AND name("maxNOP")'))
# print(dataset_maxNOP)
# ----------- Testing ----------------
# -- Pretending the parameter passing
dataset <- dataset_Hit
rows=c('measurement')
columns=c('name')
aggregate = 'mean'
# -- Function declaration
getRunsInWideFormat <- function (runattrs)
{
drop.levels <- function(dataframe) {
dataframe[] <- lapply(dataframe, function(x) x[, drop = TRUE])
return(dataframe)
}
runattrs <- drop.levels(reshape(runattrs, direction = "wide",
idvar = "runid", timevar = "attrname"))
names(runattrs) <- sapply(names(runattrs), function(name) sub("^attrvalue\\.",
"", name))
runattrs
}
# -- Function content
runattrs <- getRunsInWideFormat(dataset$runattrs)
scalars <- merge(runattrs, dataset$scalars)
rowNames = apply(scalars[rows], 1, paste, collapse = ".")
columnNames = apply(scalars[columns], 1, paste, collapse = ".")
#tapply(scalars$value, list(rowNames, columnNames), aggregate)
m <- tapply(scalars$value, list(rowNames, columnNames), aggregate)
print(m)
scalar
scalars
class(scalars)
colnames(scalars)
rownames(scalars)
scalars$measurement
dataset$scalars
# Path settings
setwd("/nix/workspace/omnet422-inet118/so/simulations/results/")
#setwd("/home/darmstadt/nguyeng/sim/omnetpp/so/simulations/results/")
# Load library
require(omnetpp)
# Input files
scalarFiles <- file.path('Donet_Homo_oneRouter_Network-*.sca')
# Measured values
dataset_hit <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkHit:count")'))
dataset_miss <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.globalStatistic") AND name("ChunkMiss:count")'))
# print(dataset_Hit)
# print(dataset_Miss)
# Parameters
dataset_maxNOP <- loadDataset(scalarFiles, add(select='module("Donet_Homo_oneRouter_Network.peerNode[0].peerApp.mesh") AND name("maxNOP")'))
# print(dataset_maxNOP)
# ----------- Testing ----------------
# -- Pretending the parameter passing
dataset <- dataset_hit
rows=c('measurement')
columns=c('name')
aggregate = 'mean'
# -- Function declaration
getRunsInWideFormat <- function (runattrs)
{
drop.levels <- function(dataframe) {
dataframe[] <- lapply(dataframe, function(x) x[, drop = TRUE])
return(dataframe)
}
runattrs <- drop.levels(reshape(runattrs, direction = "wide",
idvar = "runid", timevar = "attrname"))
names(runattrs) <- sapply(names(runattrs), function(name) sub("^attrvalue\\.",
"", name))
runattrs
}
dataset_hit
dataset_hit$scalars$runid
class(dataset_hit)
class(dataset_hit$scalars)
df_hit <- dataset_hit$scalars[,order(dataset_hit$scalars$runid)]
df_hit
df_miss <- dataset_miss$scalars[,order(dataset_miss$scalars$runid)]
df_miss
df_bind <- cbind(dataset_hit$scalars$runid, dataset_hit$scalars$value, dataset_miss$scalars$value)
df_bind
dataset_hit$scalars$runid
df_bind <- cbind(as.string(dataset_hit$scalars$runid), dataset_hit$scalars$value, dataset_miss$scalars$value)
df_bind <- cbind(string(dataset_hit$scalars$runid), dataset_hit$scalars$value, dataset_miss$scalars$value)
df_bind <- cbind(as.character(dataset_hit$scalars$runid), dataset_hit$scalars$value, dataset_miss$scalars$value)
df_bind
df_bind <- cbind(as.character(dataset_hit$scalars$runid), as.numeric(dataset_hit$scalars$value), as.numeric(dataset_miss$scalars$value)
)
df_bind <- cbind(as.character(dataset_hit$scalars$runid), as.numeric(dataset_hit$scalars$value), as.numeric(dataset_miss$scalars$value))
df_bind
class(dataset_hit$scalars$runid)
typeof(dataset_hit$scalars$runid)
df_bind <- cbind(as.numeric(dataset_hit$scalars$runid), as.numeric(dataset_hit$scalars$value), as.numeric(dataset_miss$scalars$value))
df_bind
df_bind <- cbind(as.integer(dataset_hit$scalars$runid), as.numeric(dataset_hit$scalars$value), as.numeric(dataset_miss$scalars$value))
df_bind
df_bind <- cbind(as.integer(dataset_hit$scalars$runid), as.numeric(dataset_hit$scalars$value), as.numeric(dataset_miss$scalars$value), deparse.level=0)
df_bind
df_bind <- cbind(as.integer(dataset_hit$scalars$runid), as.numeric(dataset_hit$scalars$value), as.numeric(dataset_miss$scalars$value), deparse.level=1)
df_bind
class(df_hit)
df_hit
df_bind <- cbind(df_hit, df_miss$value)
df_bind
df_ci <- transform(df_bind, value = value / (value + df_miss$value))
df_ci
scalars_ci <- merge(runattrs, df_ci)
scalars_ci
rowNames = apply(scalars[rows], 1, paste, collapse = ".")
columnNames = apply(scalars[columns], 1, paste, collapse = ".")
#tapply(scalars$value, list(rowNames, columnNames), aggregate)
m <- tapply(scalars$value, list(rowNames, columnNames), aggregate)
m <- tapply(scalars$value, list(rowNames, columnNames), aggregate)
m
m <- tapply(scalars_ci$value, list(rowNames, columnNames), aggregate)
m
